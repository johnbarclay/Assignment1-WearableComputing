#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
View(out)
View(out)
# Script to do the following:
#   1 Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Merge train and test dataset into one dataset
# develop vector of column headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
columnNames <- features$V2;
# develop vector of dsired colums
columnsOfMeanAndStd.logical <- grepl("mean|std", columnNames);
columnsOfMeanAndStd.character <- columnNames[columnsOfMeanAndStd.logical];
colNamesFilter <- c("subject","activity", "type",columnsOfMeanAndStd.character);
# get training and test data into table
observations <- rbind(
getTable("train", colNamesFilter, columnNames),
getTable("test",colNamesFilter, columnNames)
);
#write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# From the data set in step 4, creates a second, independent tidy data
# set with the average of each variable for each activity and each subject.
## grouped_observations <- group_by(observations, activity, subject )
library(reshape2);
observations <- mutate(
observations,
key = factor(paste0(observations$type,"_", observations$subject,"_", observations$activity))
)
out <- ddply(observations,.(type,subject,activity),colwise(mean))
#class(observations);
#group_by(observations, key);
#summarize(observations, tBodyAcc.mean.mean.X = mean(tBodyAcc.mean.X, na.rm = TRUE))
# obsMelt <- melt(observations,
#                 id=c("type", "subject","activity"),
#                 measure.vars=columnsOfMeanAndStd.character
#                 );
library(plyr);
#summary <- ddply(obsMelt,.(type,subject,activity),mean)
#summary <- summarize(observations, avg = mean)
#meanBySubject <- dcast(obsMelt, subject ~ variable, mean)
##xtabs(activitySubject ~ activity + subject, data=observations)
##mean1 <- tapply(observations$activity, mean )
getTable <- function(obsName, colNamesFilter, columnNames) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = columnNames );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNamesFilter];
return (table);
}
#head(merged$activity)
#
#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
View(out)
View(out)
View(out)
meansBy <- ddply(observations,.(subject,activity),colwise(mean))
key = factor(paste0(observations$type,"_", observations$subject,"_", observations$activity));
# Script to do the following:
#   1 Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# Merge train and test dataset into one dataset
# develop vector of column headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
columnNames <- features$V2;
# develop vector of dsired colums
columnsOfMeanAndStd.logical <- grepl("mean|std", columnNames);
columnsOfMeanAndStd.character <- columnNames[columnsOfMeanAndStd.logical];
colNamesFilter <- c("subject","activity", "type",columnsOfMeanAndStd.character);
# get training and test data into table
observations <- rbind(
getTable("train", colNamesFilter, columnNames),
getTable("test",colNamesFilter, columnNames)
);
#write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# From the data set in step 4, creates a second, independent tidy data
# set with the average of each variable for each activity and each subject.
## grouped_observations <- group_by(observations, activity, subject )
library(reshape2);
observations <- mutate(
observations,
key = factor(paste0(observations$type,"_", observations$subject,"_", observations$activity));
)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
getTable <- function(obsName, colNamesFilter, columnNames) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = columnNames );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNamesFilter];
return (table);
}
#head(merged$activity)
#
#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
View(meansBySubjectXActivity)
View(meansBySubjectXActivity)
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
View(meansBySubjectXActivity)
View(meansBySubjectXActivity)
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
columnNames <- features$V2;
# develop vector of dsired colums
columnsOfMeanAndStd.logical <- grepl("mean|std", columnNames);
columnsOfMeanAndStd.character <- columnNames[grepl("mean|std", columnNames)];
install.packages("reshape2");
install.packages("dplyr");
library(reshape2);
library(dplyr);
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
columnNamesObservations <- features$V2;
# develop vector of dsired colums
#columnsOfMeanAndStd.logical <- grepl("mean|std", columnNames);
#columnsOfVariables <- columnNames[grepl("mean|std", columnNames)];
colNamesFilter <- c("subject","activity", "type", columnNamesObservations[grepl("mean|std", columnNamesObservations)]);
# get training and test data into table
observations <- rbind(
getTable("train", colNamesFilter, columnNamesObservations),
getTable("test",colNamesFilter, columnNamesObservations)
);
#write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# From the data set in step 4, creates a second, independent tidy data
# set with the average of each variable for each activity and each subject.
## grouped_observations <- group_by(observations, activity, subject )
# observations <- mutate(
#     observations,
#     key = factor(paste0(observations$type,"_", observations$subject,"_", observations$activity));
# )
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
getTable <- function(obsName, colNamesFilter, columnNames) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = columnNames );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNamesFilter];
return (table);
}
#head(merged$activity)
#
#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
install.packages("reshape2")
install.packages("dplyr")
install.packages("dplyr")
#install.packages("reshape2");
#install.packages("dplyr");
library(reshape2);
library(dplyr);
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
columnNamesObservations <- features$V2;
# develop vector of dsired colums
#columnsOfMeanAndStd.logical <- grepl("mean|std", columnNames);
#columnsOfVariables <- columnNames[grepl("mean|std", columnNames)];
colNamesFilter <- c("subject","activity", "type", columnNamesObservations[grepl("mean|std", columnNamesObservations)]);
# get training and test data into table
observations <- rbind(
getTable("train", colNamesFilter, columnNamesObservations),
getTable("test",colNamesFilter, columnNamesObservations)
);
#write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# From the data set in step 4, creates a second, independent tidy data
# set with the average of each variable for each activity and each subject.
## grouped_observations <- group_by(observations, activity, subject )
# observations <- mutate(
#     observations,
#     key = factor(paste0(observations$type,"_", observations$subject,"_", observations$activity));
# )
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
getTable <- function(obsName, colNamesFilter, columnNames) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = columnNames );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNamesFilter];
return (table);
}
#head(merged$activity)
#
#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
observations <- rbind(
getTable("train", colNamesFilter, columnNamesObservations),
getTable("test",colNamesFilter, columnNamesObservations)
);
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
View(observations)
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
View(meansBySubjectXActivity)
#install.packages("reshape2");
#install.packages("dplyr");
library(reshape2);
library(dplyr);
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
colNames.Obs <- features$V2;
# develop vector of desired observational columns including independent variables (subject, activity, type)
colNames.Filter <- c("subject","activity", "type", colNames.Obs[grepl("mean|std", colNames.Obs)]);
# get training and test data into table
observations <- rbind(
DF.FromFiles("train", colNames.Filter, colNames.Obs),
DF.FromFiles("test",colNames.Filter, colNames.Obs)
);
write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# calculate mean by subject and activity (across test and train types)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
#' DF.FromFiles function a data frame for a particular observation type
#'
#' @param obsName should be "test" or "train"
#' @param colNames.Filter character vector of columns to keep
#' @param colNames.Obs character vector of variable columns in file
#'
#' @return
#' @export
#'
#' @examples
DF.FromFiles <- function(obsName, colNames.Filter, colNames.Obs) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = colNames.Obs );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNames.Filter];
return (table);
}
#head(merged$activity)
#
#
#
# head(merged$type); tail(merged$type)
# head(train); tail(train);
# head(test); tail(test);
rm("features")
rm("features","colNames.Obs")
?require
require("reshape2");
require("dplyr");
packageVersion(dply);
packageVersion(reshape2);
packageVersion("reshape2");
packageVersion("dplyr");
#
#require("reshape2");
require("dplyr");
rm("features","colNames.Obs","colNames.Filter","observations","meansBySubjectXActivity");
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
colNames.Obs <- features$V2;
rm("features");
# develop vector of desired observational columns including independent variables (subject, activity, type)
colNames.Filter <- c("subject","activity", "type", colNames.Obs[grepl("mean|std", colNames.Obs)]);
# get training and test data into table
observations <- rbind(
DF.FromFiles("train", colNames.Filter, colNames.Obs),
DF.FromFiles("test",colNames.Filter, colNames.Obs)
);
write.csv(observations, destfile="AssignmentSteps1to4Result.csv")
# calculate mean by subject and activity (across test and train types)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
#' DF.FromFiles function a data frame for a particular observation type
#'
#' @param obsName should be "test" or "train"
#' @param colNames.Filter character vector of columns to keep
#' @param colNames.Obs character vector of variable columns in file
#'
#' @return
#' @export
#'
#' @examples
DF.FromFiles <- function(obsName, colNames.Filter, colNames.Obs) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = colNames.Obs );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNames.Filter];
return (table);
}
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
colNames.Filter <- c("subject","activity", "type", colNames.Obs[grepl("mean|std", colNames.Obs)]);
# get training and test data into table
observations <- rbind(
DF.FromFiles("train", colNames.Filter, colNames.Obs),
DF.FromFiles("test",colNames.Filter, colNames.Obs)
);
# calculate mean by subject and activity (across test and train types)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
?write.csv
#
#require("reshape2");
require("dplyr");
rm("features","colNames.Obs","colNames.Filter","observations","meansBySubjectXActivity");
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
colNames.Obs <- features$V2;
rm("features");
# develop vector of desired observational columns including independent variables (subject, activity, type)
colNames.Filter <- c("subject","activity", "type", colNames.Obs[grepl("mean|std", colNames.Obs)]);
# get training and test data into table
observations <- rbind(
DF.FromFiles("train", colNames.Filter, colNames.Obs),
DF.FromFiles("test",colNames.Filter, colNames.Obs)
);
write.csv(observations, file="AssignmentSteps1to4Result.csv", append = FALSE);
# calculate mean by subject and activity (across test and train types)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
#' DF.FromFiles function a data frame for a particular observation type
#'
#' @param obsName should be "test" or "train"
#' @param colNames.Filter character vector of columns to keep
#' @param colNames.Obs character vector of variable columns in file
#'
#' @return
#' @export
#'
#' @examples
DF.FromFiles <- function(obsName, colNames.Filter, colNames.Obs) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = colNames.Obs );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNames.Filter];
return (table);
}
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
#
#require("reshape2");
require("dplyr");
rm("features","colNames.Obs","colNames.Filter","observations","meansBySubjectXActivity");
# Script to do the following:
#   - Merges the training and the test sets to create one data set.
#   - Extracts only the measurements on the mean and standard deviation for each measurement.
#   - Uses descriptive activity names to name the activities in the data set
#   - Appropriately labels the data set with descriptive variable names.
#   - From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
# develop vector of observation variable headings
features <- read.table(file = "UCI HAR Dataset/features.txt" );
features <- mutate(features, V2 = gsub("[-]",".",V2))  ## tBodyAcc-std()-Y
features <- mutate(features, V2 = gsub("[()]","",V2))  ## tBodyAcc-std()-Y
colNames.Obs <- features$V2;
rm("features");
# develop vector of desired observational columns including independent variables (subject, activity, type)
colNames.Filter <- c("subject","activity", "type", colNames.Obs[grepl("mean|std", colNames.Obs)]);
# get training and test data into table
observations <- rbind(
DF.FromFiles("train", colNames.Filter, colNames.Obs),
DF.FromFiles("test",colNames.Filter, colNames.Obs)
);
# calculate mean by subject and activity (across test and train types)
meansBySubjectXActivity <- ddply(observations,.(subject,activity),colwise(mean));
# remove type column, it has no meaning since our average included both types
meansBySubjectXActivity <- meansBySubjectXActivity[ , !names(meansBySubjectXActivity) %in% c("type")]
write.csv(observations, file="AssignmentSteps1to4Result.csv", append = FALSE);
write.csv(meansBySubjectXActivity, file="AssignmentStep5Result.csv", append = FALSE);
#' DF.FromFiles function a data frame for a particular observation type
#'
#' @param obsName should be "test" or "train"
#' @param colNames.Filter character vector of columns to keep
#' @param colNames.Obs character vector of variable columns in file
#'
#' @return df with one row for each observation.
#'          indepent variables:
#'              type = "test" or "train"
#'              subject = numeric id of participant
#'              activity = actity such as WALKING
#'          dependent variables:  observation names.
#'
DF.FromFiles <- function(obsName, colNames.Filter, colNames.Obs) { # obsName = "test" or "train"
table.obs <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/X_", obsName, ".txt"), col.name = colNames.Obs );
table.variables <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/Y_", obsName, ".txt") , col.names = c("measurement"));
table.subjects <- read.table(file = paste0("UCI HAR Dataset/", obsName, "/subject_", obsName, ".txt") , col.names = c("subject") );
table <- cbind(table.subjects, table.variables, table.obs);
table <- mutate(table, type = obsName);
# add activity names
labels <- c("WALKING","WALKING_UPSTAIRS","WALKING_DOWNSTAIRS","SITTING","STANDING","LAYING")
table <- mutate(table, activity = labels[as.integer(table$measurement)])
table <- table[,colNames.Filter];
return (table);
}
pkgTest <- function(x)
{
if (!require(x,character.only = TRUE))
{
install.packages(x,dep=TRUE)
if(!require(x,character.only = TRUE)) stop("Package not found")
}
}
